name: RHEL7-HA

provider {
    type: aws
    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}
    region: <your_region>
    subnetId: <your_subnet>
    securityGroupsIds: <your_security_groups>
    instanceNamePrefix: director
    rootVolumeSizeGB: 50
    rootVolumeType: gp2
    associatePublicIpAddresses: true
}

ssh {
    username: ec2-user
    privateKey: /home/ec2-user/.ssh/id_rsa
}

instances {
    m3x {
        type: m3.xlarge
        image: ami-2051294a # RHEL 7.2

        tags {
            owner: <your_owner>
        }

        bootstrapScriptPath: "/path/to/scripts/rhel7/bootstrap_ad.sh"
        normalizeInstance: true
    }

    m32x {
        type: m3.2xlarge
        image: ami-2051294a # RHEL 7.2

        tags {
            owner: <your_owner>
        }

        bootstrapScriptPath: "/path/to/scripts/rhel7/bootstrap_ad.sh"
        normalizeInstance: true
    }
}

databaseServers {
    mysqlm3m {
        type: mysql
        user: root
        password: "Cloudera!"
        instanceClass: db.m3.medium
        engineVersion: 5.5.40b
        dbSubnetGroupName: <your_subnet_group>
        vpcSecurityGroupIds: <your_security_groups>
        allocatedStorage: 50

        tags {
            owner: <your_owner>
        }
    }
} 

cloudera-manager {
    instance: ${instances.m32x} {
        tags {
            application: "Cloudera Manager 5"
        }
    }

    repository: "http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.7/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/RPM-GPG-KEY-cloudera"
    enableEnterpriseTrial: true
    unlimitedJce: true
    krbAdminUsername: "prod_cm@CLOUDERA.LOCAL"
    krbAdminPassword: "Cloudera!"

    databaseTemplates {
        CLOUDERA_MANAGER {
             name: cmtemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: scm
             usernamePrefix: scm
        }

        NAVIGATORMETASERVER {
             name: navmstemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: navms
             usernamePrefix: navms
        }

        NAVIGATOR {
             name: navtemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: nav
             usernamePrefix: nav
        }

        ACTIVITYMONITOR {
             name: amontemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: amon
             usernamePrefix: amon
        }

        REPORTSMANAGER {
             name: rmantemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: rman
             usernamePrefix: rman
        }
    }

    configs {
        CLOUDERA_MANAGER {
            custom_banner_html: "Managed by Cloudera Director"
            KDC_TYPE: "Active Directory"
            KDC_HOST: "cloudera.local"
            SECURITY_REALM: "CLOUDERA.LOCAL"
            KRB_MANAGE_KRB5_CONF: true
            KRB_ENC_TYPES: "aes256-cts aes128-cts rc4-hmac"
            AD_ACCOUNT_PREFIX: "cdh_"
            AD_KDC_DOMAIN: "ou=serviceaccounts,ou=prod,ou=clusters,ou=cloudera,dc=cloudera,dc=local"
        }
    
        CLOUDERA_MANAGEMENT_SERVICE {
            ssl_client_truststore_location: "/opt/cloudera/security/jks/truststore.jks"
            ssl_client_truststore_password: "Cloudera!"
        }
    
        SERVICEMONITOR {
            firehose_heapsize: 1073741824
            firehose_non_java_memory_bytes: 2147483648
            firehose_storage_dir: "/data1/cloudera-service-monitor"
        }

        HOSTMONITOR {
            firehose_heapsize: 1073741824
            firehose_non_java_memory_bytes: 2147483648
            firehose_storage_dir: "/data0/cloudera-host-monitor"
        }

        EVENTSERVER {
            eventserver_index_dir: "/data0/cloudera-scm-eventserver"
        }

        REPORTSMANAGER {
            headlamp_scratch_dir: "/data1/cloudera-scm-headlamp"
        }

        NAVIGATORMETASERVER {
            ssl_enabled: true
            ssl_server_keystore_location: "/opt/cloudera/security/jks/server.jks"
            ssl_server_keystore_password: "Cloudera!"
            ssl_server_keystore_keypassword: "Cloudera!"
            auth_backend_order: "CM_THEN_EXTERNAL"
            external_auth_type: "ACTIVE_DIRECTORY"
            nav_ldap_bind_dn: "prod_binduser"
            nav_ldap_bind_pw: "Cloudera!"
            nav_ldap_group_search_base: "ou=groups,ou=prod,ou=clusters,ou=cloudera,dc=cloudera,dc=local"
            nav_ldap_url: "ldaps://ben-ad-1.cloudera.local"
            nav_ldap_user_search_base: "dc=cloudera,dc=local"
            nav_nt_domain: "CLOUDERA.LOCAL"
            data_dir: "/data0/cloudera-scm-navigator"
        }

        # ALERTPUBLISHER { ... }
        # NAVIGATOR { ... }
        # HOSTS { ... }
    }
}

cluster {
    products {
        CDH: 5
        KAFKA: 2
    }

    parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.7/","http://archive.cloudera.com/kafka/parcels/2/"]

    services: [HDFS, YARN, ZOOKEEPER, HIVE, IMPALA, HUE, OOZIE, SPARK_ON_YARN, SENTRY, HBASE, KAFKA, FLUME, SOLR, KS_INDEXER]

    databaseTemplates {
        HIVE {
             name: hivetemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: hive
             usernamePrefix: hive
        }

        SENTRY {
             name: sentrytemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: sentry
             usernamePrefix: sentry
        }

        OOZIE {
             name: oozietemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: oozie
             usernamePrefix: oozie
        }

        HUE {
             name: huetemplate
             databaseServerName: mysqlm3m
             databaseNamePrefix: hue
             usernamePrefix: hue
        }
    }

    configs {
        HDFS {
            dfs_ha_fencing_methods: "shell(true)"

            hdfs_hadoop_ssl_enabled: true
            hdfs_sentry_sync_enable: true
            dfs_namenode_acls_enabled: true
            hadoop_secure_web_ui: true
            hadoop_rpc_protection: "privacy"
            ssl_client_truststore_location: "/opt/cloudera/security/jks/truststore.jks"
            ssl_client_truststore_password: "Cloudera!"
            ssl_server_keystore_location: "/opt/cloudera/security/jks/server.jks"
            ssl_server_keystore_keypassword: "Cloudera!"
            ssl_server_keystore_password: "Cloudera!"
            hadoop_http_auth_cookie_domain: "CLOUDERA.LOCAL"
            hadoop_authorized_admin_groups: "prod_cdh_admins"
            hadoop_authorized_admin_users: "hdfs,yarn"
            hadoop_authorized_groups: "prod_cdh_users"
            hadoop_authorized_users: "hdfs,yarn,mapred,hive,impala,oozie,hue,zookeeper,sentry,spark,sqoop,kms,httpfs,hbase,sqoop2,flume,solr,kafka,llama"
        }

        YARN {
            hadoop_secure_web_ui: true
            ssl_server_keystore_location: "/opt/cloudera/security/jks/server.jks"
            ssl_server_keystore_keypassword: "Cloudera!"
            ssl_server_keystore_password: "Cloudera!"
            yarn_admin_acl: "yarn prod_cdh_admins"
        }

        IMPALA {
            client_services_ssl_enabled: true
            enable_ldap_auth: true
            impala_ldap_uri: "ldaps://ben-ad-1.cloudera.local"
            ldap_domain: "CLOUDERA.LOCAL"
            ssl_private_key: "/opt/cloudera/security/x509/server.key"
            ssl_private_key_password: "Cloudera!"
            ssl_server_certificate: "/opt/cloudera/security/x509/server.pem"
            ssl_client_ca_certificate: "/opt/cloudera/security/x509/truststore.pem"
        }

        OOZIE {
            oozie_use_ssl: true
        }

        HUE {
            auth_backend: "desktop.auth.backend.LdapBackend"
            base_dn: "dc=cloudera,dc=local"
            bind_dn: "cn=prod_binduser,ou=users,ou=prod,ou=clusters,ou=cloudera,dc=cloudera,dc=local"
            bind_password: "Cloudera!"
            group_filter: "(&(objectClass=group)(|(sAMAccountName=prod_hue_admins)(sAMAccountName=prod_hue_users)))"
            ldap_cert: "/opt/cloudera/security/x509/truststore.pem"
            ldap_url: "ldaps://ben-ad-1.cloudera.local"
            nt_domain: "CLOUDERA.LOCAL"
            search_bind_authentication: true
            use_start_tls: false
            user_filter: "(&(objectClass=user)(|(memberOf=cn=prod_hue_admins,ou=groups,ou=prod,ou=clusters,ou=cloudera,dc=cloudera,dc=local)(memberOf=cn=prod_hue_users,ou=groups,ou=prod,ou=clusters,ou=cloudera,dc=cloudera,dc=local)))"
        }

        HIVE {
            hiveserver2_enable_ssl: true
            hiveserver2_keystore_path: "/opt/cloudera/security/jks/server.jks"
            hiveserver2_keystore_password: "Cloudera!"
            hiveserver2_truststore_file: "/opt/cloudera/security/jks/truststore.jks"
            hiveserver2_truststore_password: "Cloudera!"
        }

        SENTRY {
            sentry_service_admin_group: "hive,impala,hue,prod_sentry_admins"
        }

        HBASE {
            hbase_hadoop_ssl_enabled: true
            hbase_rpc_protection: "privacy"
            hbase_restserver_security_authentication: "kerberos"
            hbase_thriftserver_security_authentication: "auth-conf"
            ssl_server_keystore_location: "/opt/cloudera/security/jks/server.jks"
            ssl_server_keystore_password: "Cloudera!"
            ssl_server_keystore_keypassword: "Cloudera!"
        }

        KAFKA {
            "kerberos.auth.enable": true
            "zookeeper.chroot": "/kafka"
        }

        FLUME {
            flume_truststore_file: "/opt/cloudera/security/jks/truststore.jks"
            flume_truststore_password: "Cloudera!"
        }

        SOLR {
            solr_security_authentication: "kerberos"
            ldap_domain: "CLOUDERA.LOCAL"
            solr_enable_ldap_auth: true
            solr_ldap_uri: "ldaps://ben-ad-1.cloudera.local"
            solr_use_ssl: true
            solr_https_keystore_file: "/opt/cloudera/security/jks/server.jks"
            solr_https_keystore_password: "Cloudera!"
            solr_https_truststore_file: "/opt/cloudera/security/jks/truststore.jks"
            solr_https_truststore_password: "Cloudera!"
        }

        KS_INDEXER {
            hbase_indexer_security_authentication: "kerberos"
            keystore_indexer_truststore_file: "/opt/cloudera/security/jks/truststore.jks"
            keystore_indexer_truststore_password: "Cloudera!"
        }
    }

    master1 {
        count: 1

        instance: ${instances.m3x} {
            tags {
                group: master
            }
        }

        roles {
            HDFS: [NAMENODE, JOURNALNODE, FAILOVERCONTROLLER]
            YARN: [RESOURCEMANAGER]
            ZOOKEEPER: [SERVER]
            SPARK_ON_YARN: [GATEWAY]
            HIVE: [GATEWAY]
            HBASE: [MASTER]
        }

        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: hanameservice
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: hanameservice
                    dfs_name_dir_list: "/dfs/nn"
                }

                JOURNALNODE {
                    dfs_journalnode_edits_dir: "/data0/dfs/jn"
                }
            }

            ZOOKEEPER {
                SERVER {
                    dataDir: "/data1/zk"
                    dataLogDir: "/data1/zk"
                }
            }
        }
    }

    master2 {
        count: 1

        instance: ${instances.m3x} {
            tags {
                group: master
            }
        }

        roles {
            HDFS: [NAMENODE, JOURNALNODE, FAILOVERCONTROLLER]
            YARN: [RESOURCEMANAGER]
            ZOOKEEPER: [SERVER]
            SPARK_ON_YARN: [GATEWAY]
            HIVE: [GATEWAY]
            HBASE: [MASTER]
        }

        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: hanameservice
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: hanameservice
                    dfs_name_dir_list: "/dfs/nn"
                }

                JOURNALNODE {
                    dfs_journalnode_edits_dir: "/data0/dfs/jn"
                }
            }

            ZOOKEEPER {
                SERVER {
                    dataDir: "/data1/zk"
                    dataLogDir: "/data1/zk"
                }
            }
        }
    }

    master3 {
        count: 1

        instance: ${instances.m3x} {
            tags {
                group: master
            }
        }

        roles {
            HDFS: [BALANCER, JOURNALNODE]
            ZOOKEEPER: [SERVER]
            SPARK_ON_YARN: [GATEWAY]
            HIVE: [GATEWAY, HIVEMETASTORE]
            IMPALA: [STATESTORE, CATALOGSERVER]
            SENTRY: [SENTRY_SERVER]
        }

        configs {
            HDFS {
                JOURNALNODE {
                    dfs_journalnode_edits_dir: "/data0/dfs/jn"
                }
            }

            ZOOKEEPER {
                SERVER {
                    dataDir: "/data1/zk"
                    dataLogDir: "/data1/zk"
                }
            }

            IMPALA {
                STATESTORE {
                    webserver_certificate_file: "/opt/cloudera/security/x509/server.pem"
                    webserver_private_key_file: "/opt/cloudera/security/x509/server.key"
                    webserver_private_key_password_cmd: "Cloudera!"
                    webserver_htpassword_user: "impala"
                    webserver_htpassword_password: "Cloudera!"
                }

                CATALOGSERVER {
                    webserver_certificate_file: "/opt/cloudera/security/x509/server.pem"
                    webserver_private_key_file: "/opt/cloudera/security/x509/server.key"
                    webserver_private_key_password_cmd: "Cloudera!"
                    webserver_htpassword_user: "impala"
                    webserver_htpassword_password: "Cloudera!"
                }
            }
        }
    }

    worker {
        count: 3
        minCount: 3

        instance: ${instances.m3x} {
            tags {
                group: worker
            }
        }

        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            IMPALA: [IMPALAD]
            HIVE: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
            HBASE: [REGIONSERVER]
            SOLR: [SOLR_SERVER]
            KS_INDEXER: [HBASE_INDEXER]
        }

        configs {
            HDFS {
                DATANODE {
                    dfs_data_dir_list: "/data0/dfs/dn,/data1/dfs/dn"
                }
            }

            IMPALA {
                IMPALAD {
                    disk_spill_encryption: true
                    webserver_certificate_file: "/opt/cloudera/security/x509/server.pem"
                    webserver_private_key_file: "/opt/cloudera/security/x509/server.key"
                    webserver_private_key_password_cmd: "Cloudera!"
                    webserver_htpassword_user: "impala"
                    webserver_htpassword_password: "Cloudera!"
                    impalad_ldap_ca_certificate: "/opt/cloudera/security/x509/truststore.pem"
                    impalad_memory_limit: 1073741824
                    scratch_dirs: "/data0/impala/impalad,/data1/impala/impalad"
                }
            }

            YARN {
                NODEMANAGER {
                    yarn_nodemanager_log_dirs: "/data0/yarn/container-logs,/data1/yarn/container-logs"
                    yarn_nodemanager_local_dirs: "/data0/yarn/nm,/data1/yarn/nm"
                }
            }
        }
    }

    gateway {
        count: 1

        instance: ${instances.m32x} {
            tags {
                group: gateway
            }
        }

        roles {
            HIVE: [GATEWAY, HIVESERVER2, WEBHCAT]
            OOZIE: [OOZIE_SERVER]
            HUE: [HUE_SERVER]
            SPARK_ON_YARN: [GATEWAY, SPARK_YARN_HISTORY_SERVER]
            YARN: [GATEWAY, JOBHISTORY]
            HDFS: [GATEWAY, HTTPFS]
            HBASE: [GATEWAY, HBASERESTSERVER, HBASETHRIFTSERVER]
            KAFKA: [KAFKA_BROKER]
            FLUME: [AGENT]
            SOLR: [GATEWAY]
        }

        configs {
            HDFS {
                HTTPFS {
                    httpfs_use_ssl: true
                    httpfs_https_keystore_file: "/opt/cloudera/security/jks/server.jks"
                    httpfs_https_keystore_password: "Cloudera!"
                    httpfs_https_truststore_file: "/opt/cloudera/security/jks/truststore.jks"
                    httpfs_https_truststore_password: "Cloudera!"
                }
            }

            OOZIE {
                OOZIE_SERVER {
                    oozie_https_keystore_file: "/opt/cloudera/security/jks/server.jks"
                    oozie_https_keystore_password: "Cloudera!"
                    oozie_https_truststore_file: "/opt/cloudera/security/jks/truststore.jks"
                    oozie_https_truststore_password: "Cloudera!"
                }
            }

            HUE {
                HUE_SERVER {
                    ssl_enable: true
                    ssl_certificate: "/opt/cloudera/security/x509/server.pem"
                    ssl_private_key: "/opt/cloudera/security/x509/server.key"
                    ssl_private_key_password: "Cloudera!"
                    ssl_cacerts: "/opt/cloudera/security/x509/truststore.pem"
                }
            }

            HIVE {
                HIVESERVER2 {
                    ssl_enabled: true
                    ssl_server_keystore_location: "/opt/cloudera/security/jks/server.jks"
                    ssl_server_keystore_password: "Cloudera!"
                }
            }

            HBASE {
                HBASERESTSERVER {
                    hbase_restserver_ssl_enable: true
                    hbase_restserver_keystore_file: "/opt/cloudera/security/jks/server.jks"
                    hbase_restserver_keystore_password: "Cloudera!"
                    hbase_restserver_keystore_keypassword: "Cloudera!"
                }

                HBASETHRIFTSERVER {
                    hbase_thriftserver_http_use_ssl: true
                    hbase_thriftserver_http_keystore_file: "/opt/cloudera/security/jks/server.jks"
                    hbase_thriftserver_http_keystore_password: "Cloudera!"
                    hbase_thriftserver_http_keystore_keypassword: "Cloudera!"
                }
            }

            KAFKA {
                KAFKA_BROKER {
                    "security.inter.broker.protocol": "SASL_SSL"
                    "ssl.client.auth": "required"
                    ssl_enabled: true
                    ssl_server_keystore_location: "/opt/cloudera/security/jks/server.jks"
                    ssl_server_keystore_password: "Cloudera!"
                    ssl_server_keystore_keypassword: "Cloudera!"
                    ssl_client_truststore_location: "/opt/cloudera/security/jks/truststore.jks"
                    ssl_client_truststore_password: "Cloudera!"
                }
            }
        }
    }
}
